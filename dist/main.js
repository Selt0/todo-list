(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([t.id,":root {\n    --secondary-dark: #21212b;\n    --main-dark: #181820;\n    --pink: #fc76a1;\n    --main-text-color: #d5d5d7;\n    --secondary-text-color: #a7a7ab;\n    --project-text-color: #e2e2e3;\n    --active: #383846;\n    --active-hover: #272732;\n}\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.main {\n    font-size: 18px;\n    display: flex;\n    min-height: 100vh;\n    background-color: var(--main-dark);\n}\n\n/* PROJECT SIDEBAR */\n\n.sidebar {\n    background-color: var(--secondary-dark);\n    min-width: 250px;\n    width: 350px;\n    color: var(--project-text-color)\n}\n\n.sidebar h2 {\n     margin: 25px;\n    color: var(--secondary-text-color);\n}\n\n.project {\n    display: flex;\n    padding: 25px;\n    justify-content: space-between;\n}\n\n.project:hover {\n    cursor: pointer;\n    background-color: var(--active-hover);\n}\n\n.active {\n    background-color: var(--active);\n}\n\n.sidebar .project-title {\n    margin-left: 10px;\n    margin-right: 10px;\n    font-weight: 700;\n}\n\n.add-project {\n    display: flex;\n    flex-direction: column;\n    padding: 25px;\n}\n\n/* TASKS */\n.container {\n    width: 50%;\n}\n\n.tasks {\n    color: var(--main-text-color);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-top: 100px;\n    position: relative;\n}\n\n.tasks-container {\n    margin-bottom: 30px;\n}\n\n.tasks .project-title {\n    color: #fff;\n    margin-bottom: 30px;\n}\n\n.counter {\n    margin-bottom: 15px;\n}\n\n.tasks-container .card:hover {\n    background-color: var(--active-hover);\n    cursor: pointer;\n}   \n\n.card {\n    display: flex;\n    background-color: var(--secondary-dark);\n    border-radius: 15px;\n    margin-bottom: 10px;\n    padding: 15px;\n}\n\n.task-details {\n    font-size: .9rem;\n    color: var(--secondary-text-color);\n    display: flex;\n}\n\n.task-details div:nth-child(odd) {\n    margin-right: 10px;\n}\n\n.task-details i {\n    margin-right: 5px;\n}\n\n.none {\n    display:  none;\n}\n\n .low {\n    color: rgb(31, 194, 31);\n}\n\n .medium {\n    color: yellow\n}\n\n .high {\n    color: rgb(255, 75, 75);\n}\n\n.completed {\n    text-decoration: line-through;\n    text-decoration-color: #fff;\n    text-decoration-thickness: 1.5px;\n}\n\n/* FORM BUTTONS/CONTROL */\n\n.btn {\n    display: flex;\n    align-items: center;\n    border: 2px solid var(--secondary-dark);\n    padding: 15px;\n    background-color: var(--main-dark);\n    color: var(--main-text-color);\n    cursor: pointer;\n    border-radius: 10px;\n}\n\n.btn:hover {\n    background-color: var(--active-hover);\n}\n\n.project:hover .modify-buttons,\n.card:hover .modify-buttons{\n    display: block;\n}\n\n.modify-buttons {\n    display: none;\n    margin-left: auto;\n    align-self: center;\n}\n\n.modify-buttons i:hover {\n color: var(--pink)\n}\n\n.add-icon {\n    width: 30px;\n    height: 30px;\n    color: var(--main-dark);\n    background-color: var(--pink);\n    border-radius: 10px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n}\n\n.add-task .btn{\n    width: 100%;\n}\n\n.add-task {\n    padding: 0;\n    margin-bottom: 30px;\n}\n\n.checkbox {\n    width: 18px;\n    height: 18px;\n    border: 2px solid var(--pink);\n    border-radius: 5px;\n    margin-right: 10px;\n}\n\n.checkbox:hover {\n    cursor: pointer;\n}\n\n.checked {\n    color: var(--main-dark);\n    background-color: var(--pink);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.popout-btns {\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n}\n\n.popout-btns button {\n    width: 100px;\n    height: 30px;\n    padding: 5px;\n}\n\n.projectForm {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.project-input, .task-input {\n    height: 35px;\n    padding: 5px;\n    margin-bottom: 10px;\n    border-radius: 5px;\n}\n\n.taskForm {\n    width: 100%;\n    padding: 15px;\n}\n\n.task-input {\n    width: 100%;\n}\n\n/* FORM / POPOUT TASK DETAILS */\n\n.detailsForm {\n    letter-spacing: 1px;\n    color: black;\n    position: absolute;\n    padding: 15px;\n    min-width: 500px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #fff;\n    border-radius: 15px;\n}\n\n.form-control {\n    margin-top: 15px;\n    margin-bottom: 15px;\n}\n\ntextarea {\n    padding: 10px;\n    max-width: 100%;\n    line-height: 1.5;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n    box-shadow: 1px 1px 1px #999;\n}\n\n.project-info, .task-info, .fa-check {\n    pointer-events: none;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,oBAAoB;IACpB,eAAe;IACf,0BAA0B;IAC1B,+BAA+B;IAC/B,6BAA6B;IAC7B,iBAAiB;IACjB,uBAAuB;AAC3B;AACA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,aAAa;IACb,iBAAiB;IACjB,kCAAkC;AACtC;;AAEA,oBAAoB;;AAEpB;IACI,uCAAuC;IACvC,gBAAgB;IAChB,YAAY;IACZ;AACJ;;AAEA;KACK,YAAY;IACb,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,eAAe;IACf,qCAAqC;AACzC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;AACjB;;AAEA,UAAU;AACV;IACI,UAAU;AACd;;AAEA;IACI,6BAA6B;IAC7B,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,WAAW;IACX,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,qCAAqC;IACrC,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,kCAAkC;IAClC,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;AAClB;;CAEC;IACG,uBAAuB;AAC3B;;CAEC;IACG;AACJ;;CAEC;IACG,uBAAuB;AAC3B;;AAEA;IACI,6BAA6B;IAC7B,2BAA2B;IAC3B,gCAAgC;AACpC;;AAEA,yBAAyB;;AAEzB;IACI,aAAa;IACb,mBAAmB;IACnB,uCAAuC;IACvC,aAAa;IACb,kCAAkC;IAClC,6BAA6B;IAC7B,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,qCAAqC;AACzC;;AAEA;;IAEI,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;CACC;AACD;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,6BAA6B;IAC7B,mBAAmB;IACnB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,6BAA6B;IAC7B,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,6BAA6B;IAC7B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,WAAW;AACf;;AAEA,+BAA+B;;AAE/B;IACI,mBAAmB;IACnB,YAAY;IACZ,kBAAkB;IAClB,aAAa;IACb,gBAAgB;IAChB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,gBAAgB;IAChB,kBAAkB;IAClB,sBAAsB;IACtB,4BAA4B;AAChC;;AAEA;IACI,oBAAoB;AACxB",sourcesContent:[":root {\n    --secondary-dark: #21212b;\n    --main-dark: #181820;\n    --pink: #fc76a1;\n    --main-text-color: #d5d5d7;\n    --secondary-text-color: #a7a7ab;\n    --project-text-color: #e2e2e3;\n    --active: #383846;\n    --active-hover: #272732;\n}\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.main {\n    font-size: 18px;\n    display: flex;\n    min-height: 100vh;\n    background-color: var(--main-dark);\n}\n\n/* PROJECT SIDEBAR */\n\n.sidebar {\n    background-color: var(--secondary-dark);\n    min-width: 250px;\n    width: 350px;\n    color: var(--project-text-color)\n}\n\n.sidebar h2 {\n     margin: 25px;\n    color: var(--secondary-text-color);\n}\n\n.project {\n    display: flex;\n    padding: 25px;\n    justify-content: space-between;\n}\n\n.project:hover {\n    cursor: pointer;\n    background-color: var(--active-hover);\n}\n\n.active {\n    background-color: var(--active);\n}\n\n.sidebar .project-title {\n    margin-left: 10px;\n    margin-right: 10px;\n    font-weight: 700;\n}\n\n.add-project {\n    display: flex;\n    flex-direction: column;\n    padding: 25px;\n}\n\n/* TASKS */\n.container {\n    width: 50%;\n}\n\n.tasks {\n    color: var(--main-text-color);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    margin-top: 100px;\n    position: relative;\n}\n\n.tasks-container {\n    margin-bottom: 30px;\n}\n\n.tasks .project-title {\n    color: #fff;\n    margin-bottom: 30px;\n}\n\n.counter {\n    margin-bottom: 15px;\n}\n\n.tasks-container .card:hover {\n    background-color: var(--active-hover);\n    cursor: pointer;\n}   \n\n.card {\n    display: flex;\n    background-color: var(--secondary-dark);\n    border-radius: 15px;\n    margin-bottom: 10px;\n    padding: 15px;\n}\n\n.task-details {\n    font-size: .9rem;\n    color: var(--secondary-text-color);\n    display: flex;\n}\n\n.task-details div:nth-child(odd) {\n    margin-right: 10px;\n}\n\n.task-details i {\n    margin-right: 5px;\n}\n\n.none {\n    display:  none;\n}\n\n .low {\n    color: rgb(31, 194, 31);\n}\n\n .medium {\n    color: yellow\n}\n\n .high {\n    color: rgb(255, 75, 75);\n}\n\n.completed {\n    text-decoration: line-through;\n    text-decoration-color: #fff;\n    text-decoration-thickness: 1.5px;\n}\n\n/* FORM BUTTONS/CONTROL */\n\n.btn {\n    display: flex;\n    align-items: center;\n    border: 2px solid var(--secondary-dark);\n    padding: 15px;\n    background-color: var(--main-dark);\n    color: var(--main-text-color);\n    cursor: pointer;\n    border-radius: 10px;\n}\n\n.btn:hover {\n    background-color: var(--active-hover);\n}\n\n.project:hover .modify-buttons,\n.card:hover .modify-buttons{\n    display: block;\n}\n\n.modify-buttons {\n    display: none;\n    margin-left: auto;\n    align-self: center;\n}\n\n.modify-buttons i:hover {\n color: var(--pink)\n}\n\n.add-icon {\n    width: 30px;\n    height: 30px;\n    color: var(--main-dark);\n    background-color: var(--pink);\n    border-radius: 10px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 10px;\n}\n\n.add-task .btn{\n    width: 100%;\n}\n\n.add-task {\n    padding: 0;\n    margin-bottom: 30px;\n}\n\n.checkbox {\n    width: 18px;\n    height: 18px;\n    border: 2px solid var(--pink);\n    border-radius: 5px;\n    margin-right: 10px;\n}\n\n.checkbox:hover {\n    cursor: pointer;\n}\n\n.checked {\n    color: var(--main-dark);\n    background-color: var(--pink);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.popout-btns {\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n}\n\n.popout-btns button {\n    width: 100px;\n    height: 30px;\n    padding: 5px;\n}\n\n.projectForm {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.project-input, .task-input {\n    height: 35px;\n    padding: 5px;\n    margin-bottom: 10px;\n    border-radius: 5px;\n}\n\n.taskForm {\n    width: 100%;\n    padding: 15px;\n}\n\n.task-input {\n    width: 100%;\n}\n\n/* FORM / POPOUT TASK DETAILS */\n\n.detailsForm {\n    letter-spacing: 1px;\n    color: black;\n    position: absolute;\n    padding: 15px;\n    min-width: 500px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #fff;\n    border-radius: 15px;\n}\n\n.form-control {\n    margin-top: 15px;\n    margin-bottom: 15px;\n}\n\ntextarea {\n    padding: 10px;\n    max-width: 100%;\n    line-height: 1.5;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n    box-shadow: 1px 1px 1px #999;\n}\n\n.project-info, .task-info, .fa-check {\n    pointer-events: none;\n}\n"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<t.length;d++){var u=[].concat(t[d]);r&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},994:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},i=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],u=o[d]||0,l="".concat(d," ").concat(u);o[d]=u+1;var m=n(l),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)e[m].references++,e[m].updater(A);else{var p=a(A,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=n(o[i]);e[s].references--}for(var c=r(t,a),d=0;d<o.length;d++){var u=n(o[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(994),e=n.n(t),r=n(795),a=n.n(r),o=n(569),i=n.n(o),s=n(565),c=n.n(s),d=n(216),u=n.n(d),l=n(589),m=n.n(l),A=n(426),p={};p.styleTagTransform=m(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=u(),e()(A.Z,p),A.Z&&A.Z.locals&&A.Z.locals;class f{constructor(t){this.title=t,this.tasks=[],f.allProjects.push(this)}static allProjects=[];static containsProject(t){return f.allProjects.some((e=>e.title===t))}static getProject(t){return f.allProjects.find((e=>e.title===t))}static removeProject(t){f.allProjects=f.allProjects.filter((e=>e.title!==t))}setTasks(t){this.tasks=t}get todoLength(){return this.tasks.filter((t=>!t.completed)).length}get completedLength(){return this.tasks.filter((t=>t.completed)).length}get todoTasks(){return this.tasks.filter((t=>!t.completed))}get completedTasks(){return this.tasks.filter((t=>t.completed))}getTask(t){return this.tasks.find((({id:e})=>e===t))}setTask(t){this.tasks.push(t)}removeTask(t){this.tasks=this.tasks.filter((e=>e.id!=t))}}function h(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function g(t){return h(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function v(t){h(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function C(t){if(h(1,arguments),!g(t)&&"number"!=typeof t)return!1;var e=v(t);return!isNaN(Number(e))}var b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function y(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const w={date:y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var x={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(t){return function(e,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=a.width?String(a.width):o;r=t.formattingValues[i]||t.formattingValues[o]}else{var s=t.defaultWidth,c=a.width?String(a.width):t.defaultWidth;r=t.values[c]||t.values[s]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const B={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function I(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,s=o[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(c)?E(c,(function(t){return t.test(s)})):T(c,(function(t){return t.test(s)}));i=t.valueCallback?t.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var u=e.slice(s.length);return{value:i,rest:u}}}function T(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function E(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var D,j={ordinalNumber:(D={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(D.matchPattern);if(!n)return null;var r=n[0],a=t.match(D.parsePattern);if(!a)return null;var o=D.valueCallback?D.valueCallback(a[0]):a[0];o=e.valueCallback?e.valueCallback(o):o;var i=t.slice(r.length);return{value:o,rest:i}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const S={code:"en-US",formatDistance:function(t,e,n){var r,a=b[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:w,formatRelative:function(t,e,n,r){return x[t]},localize:B,match:j,options:{weekStartsOn:0,firstWeekContainsDate:1}};function M(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function P(t,e){h(2,arguments);var n=v(t).getTime(),r=M(e);return new Date(n+r)}function L(t,e){h(2,arguments);var n=M(e);return P(t,-n)}var U=864e5;function N(t){h(1,arguments);var e=1,n=v(t),r=n.getUTCDay(),a=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function Y(t){h(1,arguments);var e=v(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=N(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=N(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function W(t){h(1,arguments);var e=Y(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=N(n);return r}var O=6048e5;function q(t,e){h(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:M(a),i=null==n.weekStartsOn?o:M(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=v(t),c=s.getUTCDay(),d=(c<i?7:0)+c-i;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function F(t,e){h(1,arguments);var n=v(t),r=n.getUTCFullYear(),a=e||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,s=null==i?1:M(i),c=null==a.firstWeekContainsDate?s:M(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(r+1,0,c),d.setUTCHours(0,0,0,0);var u=q(d,e),l=new Date(0);l.setUTCFullYear(r,0,c),l.setUTCHours(0,0,0,0);var m=q(l,e);return n.getTime()>=u.getTime()?r+1:n.getTime()>=m.getTime()?r:r-1}function z(t,e){h(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:M(a),i=null==n.firstWeekContainsDate?o:M(n.firstWeekContainsDate),s=F(t,e),c=new Date(0);c.setUTCFullYear(s,0,i),c.setUTCHours(0,0,0,0);var d=q(c,e);return d}var H=6048e5;function R(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const X=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return R("yy"===e?r%100:r,e.length)},Z=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):R(n+1,2)},Q=function(t,e){return R(t.getUTCDate(),e.length)},G=function(t,e){return R(t.getUTCHours()%12||12,e.length)},J=function(t,e){return R(t.getUTCHours(),e.length)},$=function(t,e){return R(t.getUTCMinutes(),e.length)},K=function(t,e){return R(t.getUTCSeconds(),e.length)},_=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return R(Math.floor(r*Math.pow(10,n-3)),e.length)};var V={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return X(t,e)},Y:function(t,e,n,r){var a=F(t,r),o=a>0?a:1-a;return"YY"===e?R(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):R(o,e.length)},R:function(t,e){return R(Y(t),e.length)},u:function(t,e){return R(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return R(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return R(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return Z(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return R(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){h(1,arguments);var n=v(t),r=q(n,e).getTime()-z(n,e).getTime();return Math.round(r/H)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):R(a,e.length)},I:function(t,e,n){var r=function(t){h(1,arguments);var e=v(t),n=N(e).getTime()-W(e).getTime();return Math.round(n/O)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):R(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):Q(t,e)},D:function(t,e,n){var r=function(t){h(1,arguments);var e=v(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=n-r;return Math.floor(a/U)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):R(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return R(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return R(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return R(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return G(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):J(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):R(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):R(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):$(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):K(t,e)},S:function(t,e){return _(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return et(a);case"XXXX":case"XX":return nt(a);default:return nt(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return et(a);case"xxxx":case"xx":return nt(a);default:return nt(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+tt(a,":");default:return"GMT"+nt(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+tt(a,":");default:return"GMT"+nt(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return R(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return R((r._originalDate||t).getTime(),e.length)}};function tt(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+R(o,2)}function et(t,e){return t%60==0?(t>0?"-":"+")+R(Math.abs(t)/60,2):nt(t,e)}function nt(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+R(Math.floor(a/60),2)+n+R(a%60,2)}const rt=V;function at(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function ot(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const it={p:ot,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return at(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",at(a,e)).replace("{{time}}",ot(o,e))}};function st(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var ct=["D","DD"],dt=["YY","YYYY"];function ut(t){return-1!==ct.indexOf(t)}function lt(t){return-1!==dt.indexOf(t)}function mt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var At=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,pt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,ht=/''/g,gt=/[a-zA-Z]/;function vt(t,e,n){h(2,arguments);var r=String(e),a=n||{},o=a.locale||S,i=o.options&&o.options.firstWeekContainsDate,s=null==i?1:M(i),c=null==a.firstWeekContainsDate?s:M(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,u=null==d?0:M(d),l=null==a.weekStartsOn?u:M(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var m=v(t);if(!C(m))throw new RangeError("Invalid time value");var A=st(m),p=L(m,A),f={firstWeekContainsDate:c,weekStartsOn:l,locale:o,_originalDate:m},g=r.match(pt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,it[e])(t,o.formatLong,f):t})).join("").match(At).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return Ct(n);var i=rt[r];if(i)return!a.useAdditionalWeekYearTokens&&lt(n)&&mt(n,e,t),!a.useAdditionalDayOfYearTokens&&ut(n)&&mt(n,e,t),i(p,n,o.localize,f);if(r.match(gt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return g}function Ct(t){return t.match(ft)[1].replace(ht,"'")}Math.pow(10,8);var bt=36e5;function yt(t,e){h(1,arguments);var n=e||{},r=null==n.additionalDigits?2:M(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var a,o=It(t);if(o.date){var i=Tt(o.date,r);a=Et(i.restDateString,i.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var s,c=a.getTime(),d=0;if(o.time&&(d=jt(o.time),isNaN(d)))return new Date(NaN);if(!o.timezone){var u=new Date(c+d),l=new Date(0);return l.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),l.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),l}return s=Mt(o.timezone),isNaN(s)?new Date(NaN):new Date(c+d+s)}var wt={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},xt=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,kt=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,Bt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function It(t){var e,n={},r=t.split(wt.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?e=r[0]:(n.date=r[0],e=r[1],wt.timeZoneDelimiter.test(n.date)&&(n.date=t.split(wt.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var a=wt.timezone.exec(e);a?(n.time=e.replace(a[1],""),n.timezone=a[1]):n.time=e}return n}function Tt(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:t.slice((r[1]||r[2]).length)}}function Et(t,e){if(null===e)return new Date(NaN);var n=t.match(xt);if(!n)return new Date(NaN);var r=!!n[4],a=Dt(n[1]),o=Dt(n[2])-1,i=Dt(n[3]),s=Dt(n[4]),c=Dt(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,c)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var a=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,s,c):new Date(NaN);var d=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(Pt[e]||(Lt(t)?29:28))}(e,o,i)&&function(t,e){return e>=1&&e<=(Lt(t)?366:365)}(e,a)?(d.setUTCFullYear(e,o,Math.max(a,i)),d):new Date(NaN)}function Dt(t){return t?parseInt(t):1}function jt(t){var e=t.match(kt);if(!e)return NaN;var n=St(e[1]),r=St(e[2]),a=St(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,a)?n*bt+6e4*r+1e3*a:NaN}function St(t){return t&&parseFloat(t.replace(",","."))||0}function Mt(t){if("Z"===t)return 0;var e=t.match(Bt);if(!e)return 0;var n="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?n*(r*bt+6e4*a):NaN}var Pt=[31,null,31,30,31,30,31,31,30,31,30,31];function Lt(t){return t%400==0||t%4==0&&t%100!=0}function Ut(t,e){h(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:M(a),i=null==n.weekStartsOn?o:M(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=v(t),c=s.getDay(),d=(c<i?7:0)+c-i;return s.setDate(s.getDate()-d),s.setHours(0,0,0,0),s}class Nt{constructor(t){this.id=++Nt.taskID,this.title=t,this.completed=!1,this.dueDate="",this.priority="none",this.notes=""}static taskID=0;static setTaskID(t){Nt.taskID=t}setID(t){this.id=t}setTitle(t){this.title=t}setCompletionStatus(t){this.completed=t}toggleCompletion(){this.completed?this.completed=!1:this.completed=!0}setDueDate(t){this.dueDate=t}setPriority(t){this.priority=t}setNotes(t){this.notes=t}}const Yt=function(){return{projects:localStorage.getItem("projects"),taskID:localStorage.getItem("taskID")}},Wt=function(){const t=new f("default"),e=new Nt("Walk the dog");e.setPriority("medium");const n=new Nt("Wash dishes");n.toggleCompletion(),n.setDueDate(vt(new Date,"yyyy-MM-dd"));const r=new Nt("Click me!");return r.setPriority("low"),r.setNotes("Hello :) You can update the title, due date, and priority. You can also add notes."),t.setTasks([e,n,r]),t},Ot=function(){localStorage.setItem("projects",JSON.stringify(f.allProjects)),localStorage.setItem("taskID",JSON.stringify(Nt.taskID))},qt=(()=>{const t=document.querySelector(".project-container"),e=document.querySelector(".add-project"),n=document.querySelector("#add-project"),r=document.querySelector(".tasks"),a=document.querySelector(".tasks-container"),o=document.querySelector(".add-task"),i=document.querySelector("#add-task"),s=document.querySelector(".completed-tasks");function c(t){t.target.classList.contains("fa-xmark")?function(t){const e=f.getProject(t.dataset.projectTitle);f.removeProject(e.title),Ot(),t.remove(),u(document.querySelector(".project"))}(t.target.parentElement.parentElement):u(t.target)}function d(e){const n=document.createElement("div");n.classList.add("project"),n.dataset.projectTitle=e.title,t.append(n);const r=document.createElement("div");r.classList.add("project-info"),n.append(r);const a=document.createElement("i");a.classList.add("fa-solid","fa-book-open"),r.append(a);const o=document.createElement("span");o.classList.add("project-title"),o.textContent=x(e.title),r.append(o),n.append(b())}function u(t){const e=document.querySelector(".active");var n;e&&e.classList.toggle("active"),t.classList.add("active"),a.innerHTML="",s.innerHTML="",n=f.getProject(t.dataset.projectTitle),document.querySelector("h1.project-title").textContent=x(n.title),p(),g(),function(t){const e=t.todoTasks;for(const t of e)a.append(m(t))}(n),function(t){const e=t.completedTasks;for(const t of e)s.append(m(t))}(n)}function l(t){if(t.target.classList.contains("checkbox"))!function(t){const e=f.getProject(k()),n=t.parentElement,r=e.getTask(Number(n.dataset.taskId));r.toggleCompletion(),Ot(),n.remove(),function(t,e){if(e.classList.toggle("checked"),t.completed){const t=document.createElement("i");t.classList.add("fa-solid","fa-check"),e.append(t)}}(r,t),p(),g(),r.completed?s.prepend(m(r)):a.prepend(m(r))}(t.target);else if(t.target.classList.contains("fa-xmark"))!function(t){const e=f.getProject(k()),n=t.parentElement.parentElement,r=Number(n.dataset.taskId),a=e.getTask(r);e.removeTask(r),Ot(),n.remove(),a.completed?g():p()}(t.target);else if(t.target.classList.contains("card")){const e=Number(t.target.dataset.taskId);!function(t){const e=f.getProject(k()).getTask(t),n=document.createElement("form");n.classList.add("detailsForm"),r.append(n);const a=document.createElement("legend");a.textContent="Task Details",n.append(a);const o=document.createElement("div");o.classList.add("form-control"),n.append(o);const i=document.createElement("label");i.htmlFor="title",i.textContent="Task: ",o.append(i);const s=document.createElement("input");s.type="text",s.id="title",s.value=e.title,o.append(s);const c=document.createElement("div");c.classList.add("form-control"),n.append(c);const d=document.createElement("label");d.htmlFor="date",d.textContent="Due Date: ",c.append(d);const u=document.createElement("input");u.type="date",u.id="date",u.value=e.dueDate,c.append(u);const l=document.createElement("div");l.classList.add("form-control"),n.append(l);const m=document.createElement("label");m.htmlFor="priority",m.textContent="Priority: ",l.append(m);const A=document.createElement("select");A.id="priority",function(t,e){const n=["None","Low","Medium","High"];for(const r of n){const n=document.createElement("option");n.value=r.toLowerCase(),n.textContent=r,r.toLowerCase()===t.priority&&(n.selected=!0),e.append(n)}}(e,A),l.append(A);const p=document.createElement("div");p.classList.add("form-control"),n.append(p);const h=document.createElement("label");h.htmlFor="notes",h.textContent="Notes: ",p.append(h);const g=document.createElement("textarea");g.cols=50,g.rows=10,g.id="notes",g.value=e.notes,p.append(g);const v=document.createElement("input");v.type="submit",v.disabled=!0,v.style.display="none",v.ariaHidden="true",n.append(v)}(e),setTimeout((()=>{!function(t,e){const n=document.querySelector(".detailsForm"),r=f.getProject(k()).getTask(e);n.elements.title.addEventListener("change",(e=>{!function(t,e,n){t.setTitle(n),Ot(),e.querySelector(".task-title").textContent=n}(r,t,e.target.value)})),n.elements.date.addEventListener("change",(e=>{!function(t,e,n){const r=e.querySelector(".due-date");r.innerHTML="",t.setDueDate(n),Ot(),A(t,r)}(r,t,e.target.value)})),n.elements.priority.addEventListener("change",(e=>{!function(t,e,n){const r=e.querySelector(".fa-triangle-exclamation");r.classList.remove(t.priority),t.setPriority(n),Ot(),r.classList.add(t.priority)}(r,t,e.target.value)})),n.elements.notes.addEventListener("change",(t=>{!function(t,e){t.setNotes(e),Ot()}(r,t.target.value)})),setTimeout((()=>{document.addEventListener("click",w)}),0)}(t.target,e)}),0)}}function m(t){const e=document.createElement("div");e.dataset.taskId=t.id,e.classList.add("card");const n=document.createElement("div");n.classList.add("checkbox"),e.append(n);const r=document.createElement("div");r.classList.add("task-info"),e.append(r);const a=document.createElement("p");if(a.classList.add("task-title"),a.textContent=t.title,r.append(a),t.completed){n.classList.add("checked"),a.classList.add("completed");const t=document.createElement("i");t.classList.add("fa-solid","fa-check"),n.append(t)}return r.append(function(t){const e=document.createElement("div");e.classList.add("task-details");const n=document.createElement("div");return n.classList.add("due-date"),A(t,n),e.append(n),e.append(function(t){const e=document.createElement("div");e.classList.add("priority");const n=document.createElement("i");return n.classList.add("fa-solid","fa-triangle-exclamation",`${t.priority}`),e.append(n),e}(t)),e}(t)),e.append(b()),e}function A(t,e){if(t.dueDate){const n=document.createElement("i");n.classList.add("fa-solid","fa-calendar"),e.append(n);const r=document.createElement("span");r.classList.add("due"),r.textContent=vt(yt(t.dueDate),"MM-dd-yyyy"),function(t,e){h(2,arguments);var n=v(t),r=v(e);return n.getTime()>r.getTime()}(new Date,yt(t.dueDate))?(e.setAttribute("class",""),e.classList.add("due-date","high")):function(t,e,n){h(2,arguments);var r=Ut(t,n),a=Ut(e,n);return r.getTime()===a.getTime()}(new Date,yt(t.dueDate))?(e.setAttribute("class",""),e.classList.add("due-date","medium")):(e.setAttribute("class",""),e.classList.add("due-date")),e.append(r)}}function p(){const t=f.getProject(k());document.querySelector(".total-tasks").textContent=t.todoLength}function g(){const t=f.getProject(k());document.querySelector(".total-completed-tasks").textContent=t.completedLength}function C(t){const r=document.createElement("form");r.classList.add(`${t}Form`);const s=document.createElement("input");s.type="text",s.placeholder=`Enter ${t}`,s.classList.add(`${t}-input`),r.append(s);const c=document.createElement("div");c.classList.add("popout-btns"),r.append(c);const u=document.createElement("button");u.textContent="Add",c.append(u);const l=document.createElement("button");l.textContent="Cancel",c.append(l),"task"===t?(i.style.display="none",o.append(r),u.addEventListener("click",(t=>{!function(t,e){e.preventDefault();const n=f.getProject(k());if(!t)return alert("Please enter a name for your task"),!1;if(!n)return alert("Please select a project to add this task"),!1;const r=new Nt(t);f.getProject(k()).setTask(r),Ot(),p(),a.prepend(m(r)),y("task")}(s.value,t)})),l.addEventListener("click",(()=>{y("task")}))):(n.style.display="none",e.append(r),u.addEventListener("click",(t=>{!function(t,e){e.preventDefault();const n=t.toLowerCase();if(!n)return alert("Please enter a name for your project"),!1;if(f.containsProject(n))return alert("Name is already in use"),!1;const r=new f(n);Ot(),d(r),y("project")}(s.value,t)})),l.addEventListener("click",(()=>{y("project")}))),s.focus()}function b(){const t=document.createElement("div");t.classList.add("modify-buttons");const e=document.createElement("i");return e.classList.add("fa-solid","fa-xmark"),t.append(e),t}function y(t){document.querySelector(`.${t}Form`).remove(),"project"===t?n.style.display="flex":i.style.display="flex"}function w(t){const e=document.querySelector(".detailsForm");e.contains(t.target)||(e.remove(),document.removeEventListener("click",w))}function x(t){return t.split(" ").map((t=>t[0].toUpperCase()+t.slice(1))).join(" ")}function k(){return document.querySelector("h1.project-title").textContent.toLowerCase()}return{initListeners:function(){t.addEventListener("click",c),n.addEventListener("click",(()=>{C("project")})),a.addEventListener("click",l),s.addEventListener("click",l),i.addEventListener("click",(()=>{C("task")}))},renderProject:d,setActiveProject:u,renderProjectList:function(t){for(const e of t)d(e);u(document.querySelector(".project"))}}})(),{projects:Ft,taskID:zt}=Yt();if(Ft){const t=JSON.parse(Ft);for(const e of t){const t=new f(e.title);for(const n of e.tasks){const e=new Nt(n.title);e.setID(n.id),e.setCompletionStatus(n.completed),e.setDueDate(n.dueDate),e.setPriority(n.priority),e.setNotes(n.notes),t.setTask(e)}}Nt.setTaskID=zt,qt.renderProjectList(f.allProjects)}else{const t=Wt();qt.renderProject(t),qt.setActiveProject(document.querySelector(".project"))}qt.initListeners()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,